#!groovy
properties(
  [
    [
      $class       : 'GithubProjectProperty',
      projectUrlStr: 'https://github.com/hmcts/am-org-role-mapping-service'
    ],
    pipelineTriggers([[$class: 'GitHubPushTrigger']])
  ]
)

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.HealthChecker

def type = "java"
def product = "am"
def component = "org-role-mapping-service"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

def secrets = [
    's2s-${env}': [
      secret('microservicekey-am-org-role-mapping-service', 'BEFTA_S2S_CLIENT_SECRET'),
      secret('microservicekey-am-org-role-mapping-service', 'AM_ORG_ROLE_MAPPING_SERVICE_SECRET'),
      secret('microservicekey-xui-webapp', 'XUI_WEBAPP_S2S_SECRET')
    ],
    'am-${env}': [
      secret('orm-IDAM-CLIENT-ID', 'ORM_IDAM_CLIENT_ID'),
      secret('orm-IDAM-CLIENT-ID', 'OAUTH2_CLIENT_ID'),
      secret('orm-IDAM-CLIENT-SECRET', 'ORG_ROLE_MAPPING_IDAM_CLIENT_SECRET'),
      secret('orm-IDAM-CLIENT-SECRET', 'OAUTH2_CLIENT_SECRET'),
      secret('test-am-user2-befta-pwd', 'TEST_AM_USER2_BEFTA_PWD'),
      secret('test-am-crd-user1-befta', 'TEST_AM_CRD_USER1_BEFTA'),
      secret('test-am-crd-user1-befta-password', 'TEST_AM_CRD_USER1_BEFTA_PASSWORD'),
      secret('test-am-jrd-user1-befta', 'TEST_AM_JRD_USER1_BEFTA'),
      secret('test-am-jrd-user1-befta-password', 'TEST_AM_JRD_USER1_BEFTA_PASSWORD'),
      secret('test-am-jrd-user2-befta', 'TEST_AM_JRD_USER2_BEFTA'),
      secret('test-am-jrd-user2-befta-password', 'TEST_AM_JRD_USER2_BEFTA_PASSWORD'),
      secret('caseworker-topic-primary-send-listen-shared-access-key', 'AMQP_CRD_SHARED_ACCESS_KEY_VALUE'),
      secret('judicial-topic-primary-send-listen-shared-access-key', 'AMQP_JRD_SHARED_ACCESS_KEY_VALUE')
    ]
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

// Vars needed for functional and smoke tests run against AKS
env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
env.IDAM_TESTING_SUPPORT_URL = "https://idam-testing-support-api.aat.platform.hmcts.net"
env.IDAM_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "am_org_role_mapping_service"
env.OAUTH2_REDIRECT_URI = "http://am-role-assignment-service-aat.service.core-compute-aat.internal/oauth2redirect"
env.OAUTH2_ACCESS_TOKEN_TYPE = "OIDC"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY = "JUST_WARN"
env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.OAUTH2_SCOPE_VARIABLES = "openid%20profile%20roles%20authorities"
env.OPENID_SCOPE_VARIABLES = "openid+profile+roles+authorities"
env.MICROSERVICE_NAME = "am_org_role_mapping_service"
env.EXTERNAL_FLAG_QUERY_PATH = "am/role-mapping/fetchFlagStatus?flagName="
env.DEFINITION_STORE_HOST = "http://ccd-definition-store-api-pr-575.service.core-compute-preview.internal"
env.DEFINITION_STORE_URL_BASE = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
env.CRD_URL = "http://rd-caseworker-ref-api-aat.service.core-compute-aat.internal"
// Vars for Kubernetes PACT
env.PACT_BROKER_FULL_URL = "https://pact-broker.platform.hmcts.net"
env.AMQP_HOST = "rd-servicebus-aat.servicebus.windows.net"
env.CRD_TOPIC_NAME = "rd-caseworker-topic-aat"
env.JRD_TOPIC_NAME = "rd-judicial-topic-aat"
env.ROLE_ASSIGNMENT_URL = "http://am-role-assignment-service-aat.service.core-compute-aat.internal"
env.JUDICIAL_BOOKING_URL = "http://am-judicial-booking-service-aat.service.core-compute-aat.internal"

// Vars for Kubernetes PACT
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
env.PACT_BROKER_PORT = "443"
env.PACT_BROKER_SCHEME = "https"

// Var to turn on CRD/JRD FTAs: DTSAM-336 (NB: only disable temporarily if an RD service is unavailable)
env.CASEWORKER_FTA_ENABLED = "true"
env.JUDICIAL_FTA_ENABLED = "true"

// Var to turn on JBS FTAs (NB: only disable temporarily if JBS service is unavailable)
env.BOOKING_FTA_ENABLED = "true"

// Var to turn FTA on for azure-messaging-servicebus DTSAM-150
env.AZURE_SERVICE_BUS_FTA_ENABLED = "true"
env.REFRESH_FTA_ENABLED = "true"

// Vars for Azure Container Registries DTSAM-370
env.TESTCONTAINERS_HOST_OVERRIDE="localhost"
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX="hmctspublic.azurecr.io/imported/"

withPipeline(type, product, component) {
  if (env.BRANCH_NAME.startsWith("PR")) {
    env.ORM_ENV = "pr"
  }
  else if(env.BRANCH_NAME == 'master') {
    env.ORM_ENV = "aat"
    // Var turned off for staging as ASB is shared with AAT instances
    env.AZURE_SERVICE_BUS_FTA_ENABLED = "false"
    // Don't run refresh FTAs on AAT DTSAM-173
    env.REFRESH_FTA_ENABLED = "false"
  }
  else {
    env.ORM_ENV = env.BRANCH_NAME
  }
  onMaster {
    enableSlackNotifications('#am-master-builds')
  }
  onPR {
    env.ROLE_ASSIGNMENT_URL = "https://ras-am-org-role-mapping-service-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.JUDICIAL_BOOKING_URL = "https://jbs-am-org-role-mapping-service-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    enableSlackNotifications('#am-master-builds')
  }

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  disableLegacyDeploymentOnAAT()
  disableLegacyDeployment()
  enableDbMigration('am')

  // Sync environment specific branches with master branch
  syncBranchesWithMaster(branchesToSync)

  afterAlways('test') {
    // jenkins may fail to copy artifacts after some failures
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/checkstyle/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/test/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/integration/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/test-results/test/*.xml'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/test-results/integration/*.xml'
  }

  before('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/integration/**/*'
  }

  before('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/integration/**/*'

    // check the extra RAS and JBS instances are up in PREVIEW for this PR
    def healthChecker = new HealthChecker(this)
    healthChecker.check("$ROLE_ASSIGNMENT_URL/health", 10, 40)
    healthChecker.check("$JUDICIAL_BOOKING_URL/health", 10, 40)
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/cucumber/functional-html-reports",
            reportFiles          : "overview-features.html,overview-failures.html,",
            reportTitles         : "Features,Failures",
            reportName           : "Functional Test Report"
    ]
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/cucumber/functional-html-reports",
            reportFiles          : "overview-features.html,overview-failures.html,",
            reportTitles         : "Features,Failures",
            reportName           : "Functional Test Report"
    ]
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  afterAlways('pact-consumer-tests') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
  }

  onMaster(){
      enablePactAs([
              AppPipelineDsl.PactRoles.PROVIDER,
              AppPipelineDsl.PactRoles.CONSUMER,
              AppPipelineDsl.PactRoles.CONSUMER_DEPLOY_CHECK
      ])
  }
  onPR(){
    enablePactAs([
            AppPipelineDsl.PactRoles.PROVIDER,
            AppPipelineDsl.PactRoles.CONSUMER,
            AppPipelineDsl.PactRoles.CONSUMER_DEPLOY_CHECK
    ])
  }
}
