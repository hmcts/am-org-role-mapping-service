server:
  port: ${PORT:4098}

management:
  health:
    defaults:
      enabled: true
  endpoint:
    health:
      enabled: true
      cache:
        time-to-live: 5s
      show-details: "always"
  security:
    enabled: false
  endpoints:
    health:
      sensitive: false
    web:
      base-path: /
      exposure:
        include: 'health'

security:
  anonymousPaths:
    - "/"
    - "/health/**"
    - "/health"
    - "/actuator/**"
    - "/loggers/**"
    - "/am/role-assignments/fetchFlagStatus"
    - "/swagger-ui.html"
    - "/swagger-resources/**"
    - "/v2/api-docs"
    - "/webjars/springfox-swagger-ui/**"
    - "/search/**"
    - "/csrf"
    - "/error"
    - "/favicon.ico"
  authorisedRoles:
  authorisedServices: ${AM_ORG_ROLE_MAPPING_S2S_AUTHORISED_SERVICES:am_org_role_mapping_service,am_role_assignment_service}

spring:
  application:
    name: Organisation Role Mapping Service
  main:
    allow-bean-definition-overriding: true
  jackson:
    default-property-inclusion: NON_NULL
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  flyway.enabled: ${ENABLE_DB_MIGRATE:true}
  flyway.locations: classpath:db/migration
  datasource:
    url: jdbc:postgresql://${ORG_ROLE_MAPPING_DB_HOST:localhost}:${ORG_ROLE_MAPPING_DB_PORT:5451}/${ORG_ROLE_MAPPING_DB_NAME:org_role_mapping}${ORG_ROLE_MAPPING_DB_OPTIONS:?stringtype=unspecified}
    username: ${ORG_ROLE_MAPPING_DB_USERNAME:am}
    password: ${ORG_ROLE_MAPPING_DB_PASSWORD:am}
    properties:
      charSet: UTFh-8
    hikari:
      maximumPoolSize: 10
      poolName: AMHikariCP
      maxLifetime: 90000
      connectionTimeout: 10000
      keepAliveTime: 60000
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID_API_BASE_URI:https://idam-web-public.aat.platform.hmcts.net/o}
        registration:
          oidc:
            client-id: microservicekey-am-role-assignment-service
            client-secret: ${AM_ROLE_ASSIGNMENT_SERVICE_SECRET:AAAAAAAAAAAAAAAA}
  cache:
    type: ${ENABLE_CACHE:}
    cache-names: token
    caffeine:
      spec: maximumSize=50,expireAfterWrite=120s
oidc.issuer: ${OIDC_ISSUER_URL:https://forgerock-am.service.core-compute-idam-aat.internal:8443/openam/oauth2/hmcts}

### dependency configuration
idam:
  s2s-auth:
    # AAAAAAAAAAAAAAAA
    totp_secret: ${AM_ORG_ROLE_MAPPING_SERVICE_SECRET:AAAAAAAAAAAAAAAA}
    microservice: am_org_role_mapping_service
    url: ${IDAM_S2S_URL:http://localhost:4502}
  s2s-authorised:
    services: ${ROLE_ASSIGNMENT_S2S_AUTHORISED_SERVICES:am_role_assignment_service,am_org_role_mapping_service,am_role_assignment_refresh_batch}
  api.url: ${IDAM_USER_URL:http://localhost:5000}
  client:
    id: ${ORM_IDAM_CLIENT_ID:am_docker}
    secret: ${ORG_ROLE_MAPPING_IDAM_CLIENT_SECRET:am_docker_secret}
    redirect_uri: ${ORG_ROLE_MAPPING_IDAM_REDIRECT_URI:http://localhost:4096/oauth2redirect}
    admin:
      userId: ${ORG_ROLE_MAPPING_IDAM_ADMIN_USERID:}
      secret: ${ORG_ROLE_MAPPING_IDAM_ADMIN_PASSWORD:}
      scope: ${ORG_ROLE_MAPPING_IDAM_ADMIN_SCOPE:openid profile roles authorities}

testS2S:
  api:
    url: "/testS2SAuthorization"
integrationTest:
  api:
    url: "/"

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: BASIC
      crdclient:
        url: http://rd-caseworker-ref-api-pr-349.service.core-compute-preview.internal/
      roleAssignmentApp:
        url: ${ROLE_ASSIGNMENT_APP_URL:http://localhost:4096}

swaggerUrl: "${AM_ORG_ROLE_MAPPING_SWAGGER_AM_URL:localhost:4098}"
OrgRoleMappingUrl: ${TEST_URL:http://localhost:4098}
roleAssignmentAppUrl: ${ROLE_ASSIGNMENT_APP_URL:http://localhost:4096}

amqp:
  host: ${AMQP_HOST:test}
  sharedAccessKeyName: ${AMQP_SHARED_ACCESS_KEY_NAME:test}
  sharedAccessKeyValue: ${AMQP_SHARED_ACCESS_KEY_VALUE:test}
  topic: ${AMQP_TOPIC_NAME:aat}
  subscription: ${SUBSCRIPTION_NAME:subscriptionName}
  # DO NOT SET THIS 'true' IN PRODUCTION!
  trustAllCerts: ${TRUST_ALL_CERTS:true}

launchdarkly:
  sdk:
    key: ${LD_SDK_KEY:}
    environment: ${LAUNCH_DARKLY_ENV:local}
    user: am-${LAUNCH_DARKLY_ENV:local}
refresh:
  Job:
    update: ${REFRESH_JOB:}
    pageSize: ${REFRESH_JOB_PAGE_SIZE:400}
    sortDirection: ${REFRESH_JOB_SORT_DIR:ASC}
    sortColumn: ${REFRESH_JOB_SORT_COL:}

dbFeature:
  flags:
    enable: ${DB_FEATURE_FLAG_ENABLE:}
    disable: ${DB_FEATURE_FLAG_DISABLE:}
logging.level.uk.gov.hmcts: ${APPLICATION_LOGGING_LEVEL:INFO}